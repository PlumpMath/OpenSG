/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComputeShaderAlgorithm!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGTextureImageChunk.h"       // TextureImages Class
#include "OSGComputeShaderChunk.h"      // ComputeShader Class

#include "OSGComputeShaderAlgorithmBase.h"
#include "OSGComputeShaderAlgorithm.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ComputeShaderAlgorithm
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureImageChunk * ComputeShaderAlgorithmBase::_mfTextureImages
    
*/

/*! \var ComputeShaderChunk * ComputeShaderAlgorithmBase::_sfComputeShader
    
*/

/*! \var Vec3i           ComputeShaderAlgorithmBase::_sfDispatchConfig
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ComputeShaderAlgorithm *, nsOSG>::_type(
    "ComputeShaderAlgorithmPtr", 
    "ComputeAlgorithmPtr", 
    ComputeShaderAlgorithm::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ComputeShaderAlgorithm *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ComputeShaderAlgorithm *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ComputeShaderAlgorithm *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComputeShaderAlgorithmBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecTextureImageChunkPtr::Description(
        MFUnrecTextureImageChunkPtr::getClassType(),
        "textureImages",
        "",
        TextureImagesFieldId, TextureImagesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComputeShaderAlgorithm::editHandleTextureImages),
        static_cast<FieldGetMethodSig >(&ComputeShaderAlgorithm::getHandleTextureImages));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComputeShaderChunkPtr::Description(
        SFUnrecComputeShaderChunkPtr::getClassType(),
        "computeShader",
        "",
        ComputeShaderFieldId, ComputeShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComputeShaderAlgorithm::editHandleComputeShader),
        static_cast<FieldGetMethodSig >(&ComputeShaderAlgorithm::getHandleComputeShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3i::Description(
        SFVec3i::getClassType(),
        "dispatchConfig",
        "",
        DispatchConfigFieldId, DispatchConfigFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComputeShaderAlgorithm::editHandleDispatchConfig),
        static_cast<FieldGetMethodSig >(&ComputeShaderAlgorithm::getHandleDispatchConfig));

    oType.addInitialDesc(pDesc);
}


ComputeShaderAlgorithmBase::TypeObject ComputeShaderAlgorithmBase::_type(
    ComputeShaderAlgorithmBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ComputeShaderAlgorithmBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ComputeShaderAlgorithm::initMethod),
    reinterpret_cast<ExitContainerF>(&ComputeShaderAlgorithm::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(&ComputeShaderAlgorithm::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ComputeShaderAlgorithm\"\n"
    "\tparent=\"ComputeAlgorithm\"\n"
    "\tlibrary=\"ContribComputeBase\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"textureImages\"\n"
    "      type=\"TextureImageChunk\"\n"
    "      category=\"pointer\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"computeShader\"\n"
    "      type=\"ComputeShaderChunk\"\n"
    "      category=\"pointer\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"dispatchConfig\"\n"
    "      type=\"Vec3i\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      defaultValue=\"1, 0, 0\"\n"
    "      >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComputeShaderAlgorithmBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComputeShaderAlgorithmBase::getType(void) const
{
    return _type;
}

UInt32 ComputeShaderAlgorithmBase::getContainerSize(void) const
{
    return sizeof(ComputeShaderAlgorithm);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ComputeShaderAlgorithm::_mfTextureImages field.
const MFUnrecTextureImageChunkPtr *ComputeShaderAlgorithmBase::getMFTextureImages(void) const
{
    return &_mfTextureImages;
}

MFUnrecTextureImageChunkPtr *ComputeShaderAlgorithmBase::editMFTextureImages  (void)
{
    editMField(TextureImagesFieldMask, _mfTextureImages);

    return &_mfTextureImages;
}
TextureImageChunk * ComputeShaderAlgorithmBase::getTextureImages(const UInt32 index) const
{
    return _mfTextureImages[index];
}

//! Get the ComputeShaderAlgorithm::_sfComputeShader field.
const SFUnrecComputeShaderChunkPtr *ComputeShaderAlgorithmBase::getSFComputeShader(void) const
{
    return &_sfComputeShader;
}

SFUnrecComputeShaderChunkPtr *ComputeShaderAlgorithmBase::editSFComputeShader  (void)
{
    editSField(ComputeShaderFieldMask);

    return &_sfComputeShader;
}

//! Get the value of the ComputeShaderAlgorithm::_sfComputeShader field.
ComputeShaderChunk * ComputeShaderAlgorithmBase::getComputeShader(void) const
{
    return _sfComputeShader.getValue();
}

//! Set the value of the ComputeShaderAlgorithm::_sfComputeShader field.
void ComputeShaderAlgorithmBase::setComputeShader(ComputeShaderChunk * const value)
{
    editSField(ComputeShaderFieldMask);

    _sfComputeShader.setValue(value);
}


SFVec3i *ComputeShaderAlgorithmBase::editSFDispatchConfig(void)
{
    editSField(DispatchConfigFieldMask);

    return &_sfDispatchConfig;
}

const SFVec3i *ComputeShaderAlgorithmBase::getSFDispatchConfig(void) const
{
    return &_sfDispatchConfig;
}




void ComputeShaderAlgorithmBase::pushToTextureImages(TextureImageChunk * const value)
{
    editMField(TextureImagesFieldMask, _mfTextureImages);

    _mfTextureImages.push_back(value);
}

void ComputeShaderAlgorithmBase::assignTextureImages(const MFUnrecTextureImageChunkPtr &value)
{
    MFUnrecTextureImageChunkPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecTextureImageChunkPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<ComputeShaderAlgorithm *>(this)->clearTextureImages();

    while(elemIt != elemEnd)
    {
        this->pushToTextureImages(*elemIt);

        ++elemIt;
    }
}

void ComputeShaderAlgorithmBase::removeFromTextureImages(UInt32 uiIndex)
{
    if(uiIndex < _mfTextureImages.size())
    {
        editMField(TextureImagesFieldMask, _mfTextureImages);

        _mfTextureImages.erase(uiIndex);
    }
}

void ComputeShaderAlgorithmBase::removeObjFromTextureImages(TextureImageChunk * const value)
{
    Int32 iElemIdx = _mfTextureImages.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(TextureImagesFieldMask, _mfTextureImages);

        _mfTextureImages.erase(iElemIdx);
    }
}
void ComputeShaderAlgorithmBase::clearTextureImages(void)
{
    editMField(TextureImagesFieldMask, _mfTextureImages);


    _mfTextureImages.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT ComputeShaderAlgorithmBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextureImagesFieldMask & whichField))
    {
        returnValue += _mfTextureImages.getBinSize();
    }
    if(FieldBits::NoField != (ComputeShaderFieldMask & whichField))
    {
        returnValue += _sfComputeShader.getBinSize();
    }
    if(FieldBits::NoField != (DispatchConfigFieldMask & whichField))
    {
        returnValue += _sfDispatchConfig.getBinSize();
    }

    return returnValue;
}

void ComputeShaderAlgorithmBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextureImagesFieldMask & whichField))
    {
        _mfTextureImages.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComputeShaderFieldMask & whichField))
    {
        _sfComputeShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DispatchConfigFieldMask & whichField))
    {
        _sfDispatchConfig.copyToBin(pMem);
    }
}

void ComputeShaderAlgorithmBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextureImagesFieldMask & whichField))
    {
        editMField(TextureImagesFieldMask, _mfTextureImages);
        _mfTextureImages.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComputeShaderFieldMask & whichField))
    {
        editSField(ComputeShaderFieldMask);
        _sfComputeShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DispatchConfigFieldMask & whichField))
    {
        editSField(DispatchConfigFieldMask);
        _sfDispatchConfig.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ComputeShaderAlgorithmTransitPtr ComputeShaderAlgorithmBase::createLocal(BitVector bFlags)
{
    ComputeShaderAlgorithmTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ComputeShaderAlgorithm>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ComputeShaderAlgorithmTransitPtr ComputeShaderAlgorithmBase::createDependent(BitVector bFlags)
{
    ComputeShaderAlgorithmTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ComputeShaderAlgorithm>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ComputeShaderAlgorithmTransitPtr ComputeShaderAlgorithmBase::create(void)
{
    ComputeShaderAlgorithmTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ComputeShaderAlgorithm>(tmpPtr);
    }

    return fc;
}

ComputeShaderAlgorithm *ComputeShaderAlgorithmBase::createEmptyLocal(BitVector bFlags)
{
    ComputeShaderAlgorithm *returnValue;

    newPtr<ComputeShaderAlgorithm>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ComputeShaderAlgorithm *ComputeShaderAlgorithmBase::createEmpty(void)
{
    ComputeShaderAlgorithm *returnValue;

    newPtr<ComputeShaderAlgorithm>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ComputeShaderAlgorithmBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ComputeShaderAlgorithm *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ComputeShaderAlgorithm *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ComputeShaderAlgorithmBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ComputeShaderAlgorithm *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ComputeShaderAlgorithm *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ComputeShaderAlgorithmBase::shallowCopy(void) const
{
    ComputeShaderAlgorithm *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ComputeShaderAlgorithm *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ComputeShaderAlgorithmBase::ComputeShaderAlgorithmBase(void) :
    Inherited(),
    _mfTextureImages          (),
    _sfComputeShader          (NULL),
    _sfDispatchConfig         (Vec3i(1, 0, 0))
{
}

ComputeShaderAlgorithmBase::ComputeShaderAlgorithmBase(const ComputeShaderAlgorithmBase &source) :
    Inherited(source),
    _mfTextureImages          (),
    _sfComputeShader          (NULL),
    _sfDispatchConfig         (source._sfDispatchConfig         )
{
}


/*-------------------------- destructors ----------------------------------*/

ComputeShaderAlgorithmBase::~ComputeShaderAlgorithmBase(void)
{
}

void ComputeShaderAlgorithmBase::onCreate(const ComputeShaderAlgorithm *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ComputeShaderAlgorithm *pThis = static_cast<ComputeShaderAlgorithm *>(this);

        MFUnrecTextureImageChunkPtr::const_iterator TextureImagesIt  =
            source->_mfTextureImages.begin();
        MFUnrecTextureImageChunkPtr::const_iterator TextureImagesEnd =
            source->_mfTextureImages.end  ();

        while(TextureImagesIt != TextureImagesEnd)
        {
            pThis->pushToTextureImages(*TextureImagesIt);

            ++TextureImagesIt;
        }

        pThis->setComputeShader(source->getComputeShader());
    }
}

GetFieldHandlePtr ComputeShaderAlgorithmBase::getHandleTextureImages   (void) const
{
    MFUnrecTextureImageChunkPtr::GetHandlePtr returnValue(
        new  MFUnrecTextureImageChunkPtr::GetHandle(
             &_mfTextureImages,
             this->getType().getFieldDesc(TextureImagesFieldId),
             const_cast<ComputeShaderAlgorithmBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComputeShaderAlgorithmBase::editHandleTextureImages  (void)
{
    MFUnrecTextureImageChunkPtr::EditHandlePtr returnValue(
        new  MFUnrecTextureImageChunkPtr::EditHandle(
             &_mfTextureImages,
             this->getType().getFieldDesc(TextureImagesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ComputeShaderAlgorithm::pushToTextureImages,
                    static_cast<ComputeShaderAlgorithm *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&ComputeShaderAlgorithm::removeFromTextureImages,
                    static_cast<ComputeShaderAlgorithm *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ComputeShaderAlgorithm::removeObjFromTextureImages,
                    static_cast<ComputeShaderAlgorithm *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&ComputeShaderAlgorithm::clearTextureImages,
                    static_cast<ComputeShaderAlgorithm *>(this)));

    editMField(TextureImagesFieldMask, _mfTextureImages);

    return returnValue;
}

GetFieldHandlePtr ComputeShaderAlgorithmBase::getHandleComputeShader   (void) const
{
    SFUnrecComputeShaderChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecComputeShaderChunkPtr::GetHandle(
             &_sfComputeShader,
             this->getType().getFieldDesc(ComputeShaderFieldId),
             const_cast<ComputeShaderAlgorithmBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComputeShaderAlgorithmBase::editHandleComputeShader  (void)
{
    SFUnrecComputeShaderChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecComputeShaderChunkPtr::EditHandle(
             &_sfComputeShader,
             this->getType().getFieldDesc(ComputeShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComputeShaderAlgorithm::setComputeShader,
                    static_cast<ComputeShaderAlgorithm *>(this), _1));

    editSField(ComputeShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComputeShaderAlgorithmBase::getHandleDispatchConfig  (void) const
{
    SFVec3i::GetHandlePtr returnValue(
        new  SFVec3i::GetHandle(
             &_sfDispatchConfig,
             this->getType().getFieldDesc(DispatchConfigFieldId),
             const_cast<ComputeShaderAlgorithmBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComputeShaderAlgorithmBase::editHandleDispatchConfig (void)
{
    SFVec3i::EditHandlePtr returnValue(
        new  SFVec3i::EditHandle(
             &_sfDispatchConfig,
             this->getType().getFieldDesc(DispatchConfigFieldId),
             this));


    editSField(DispatchConfigFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ComputeShaderAlgorithmBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ComputeShaderAlgorithm *pThis = static_cast<ComputeShaderAlgorithm *>(this);

    pThis->execSync(static_cast<ComputeShaderAlgorithm *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ComputeShaderAlgorithmBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ComputeShaderAlgorithm *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ComputeShaderAlgorithm *>(pRefAspect),
                  dynamic_cast<const ComputeShaderAlgorithm *>(this));

    return returnValue;
}
#endif

void ComputeShaderAlgorithmBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ComputeShaderAlgorithm *>(this)->clearTextureImages();

    static_cast<ComputeShaderAlgorithm *>(this)->setComputeShader(NULL);


}


OSG_END_NAMESPACE
